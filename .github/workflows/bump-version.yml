name: Manual version bump and build

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch):'
        required: true
        default: 'patch'
  # push:
  #   branches:
  #     - main
  #     - bump-version

jobs:
  approve:
    name: Approve version bump
    environment: restricted
    runs-on: ubuntu-latest
    steps:
      - name: Request approval
        run: echo "Requesting approval for version bump"

  test:
    name: Test on ${{ matrix.os }} / py${{ matrix.python-version }} / ${{ matrix.architecture }}
    needs: approve
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.11", "3.12"] # ["3.9", "3.10", "3.11", "3.12"]
        architecture: [x64]
        include:
          # Add arm64 for macOS
          - os: macos-latest
            python-version: "3.9"
            architecture: arm64
          - os: macos-latest
            python-version: "3.10"
            architecture: arm64
          - os: macos-latest
            python-version: "3.11"
            architecture: arm64
          - os: macos-latest
            python-version: "3.12"
            architecture: arm64
          # Add x64 for macOS
          - os: 'macos-13'
            python-version: "3.9"
            architecture: x64
          - os: 'macos-13'
            python-version: "3.10"
            architecture: x64
          - os: macos-latest
            python-version: "3.11"
            architecture: x64
          - os: macos-latest
            python-version: "3.12"
            architecture: x64

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Run tests
        run: |
          python -m pip install $(python -c "import glob; print(glob.glob('dist/*.whl')[0])")
          pip install scipy pytest pytest-cov
          pytest

  bump:
    name: Bump Version
    permissions:
      contents: write
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Show Inputs
        run: |
          echo "Version type: ${{ github.event.inputs.version_type }}"

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install bump-my-version
        run: |
          python -m pip install --upgrade pip
          pip install bump-my-version

      - name: Bump Version
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          bump-my-version bump ${{ github.event.inputs.version_type }}

      - name: Push changes and tag
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git push origin HEAD:main
          git push origin v$(bump-my-version show current_version)

  release:
    name: Create New release
    needs: bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
            fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install bump-my-version
        run: |
          python -m pip install --upgrade pip
          pip install bump-my-version

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag_name=v$(bump-my-version show current_version)
          gh release create "$tag_name" --title "$tag_name" --notes "Automated release for $tag_name"

  build:
    name: Build on ${{ matrix.os }} / py${{ matrix.python-version }} / ${{ matrix.architecture }}
    needs: release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        architecture: [x64]
        include:
          # Add arm64 for macOS
          - os: macos-latest
            python-version: "3.9"
            architecture: arm64
          - os: macos-latest
            python-version: "3.10"
            architecture: arm64
          - os: macos-latest
            python-version: "3.11"
            architecture: arm64
          - os: macos-latest
            python-version: "3.12"
            architecture: arm64
          # Add x64 for macOS
          - os: 'macos-13'
            python-version: "3.9"
            architecture: x64
          - os: 'macos-13'
            python-version: "3.10"
            architecture: x64
          - os: macos-latest
            python-version: "3.11"
            architecture: x64
          - os: macos-latest
            python-version: "3.12"
            architecture: x64

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build package
        run: python -m build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: laser-core-${{ matrix.os }}-py${{ matrix.python-version }}-${{ matrix.architecture }}
          path: dist/*

      - name: Upload artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pip install bump-my-version
          tag_name=v$(bump-my-version show current_version)
          gh release upload "$tag_name" $(python -c "import glob; print(glob.glob('dist/*.whl')[0])")

      - name: Push to PyPI
        env:
            TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install twine
          python3 -m twine upload --verbose $(python -c "import glob; print(glob.glob('dist/*.whl')[0])")
