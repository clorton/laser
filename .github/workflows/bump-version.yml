# .github/workflows/build-test-publish.yml
name: Build, Test, and Publish

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Type of version bump (major, minor, patch):'
        required: true
        default: 'patch'

jobs:
  approve:
    name: Approve version bump
    environment: restricted
    runs-on: ubuntu-latest
    steps:
      - name: Request approval
        run: echo "Requesting approval for version bump"

  build-test:
    name: Build & Test (${{ matrix.os }} | Python ${{ matrix.python-version }})
    needs: approve
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]  # macos-13: Intel, macos-14: Apple Silicon
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        exclude:
          - os: macos-14
            python-version: "3.9"  # Adjust if limited support on Apple Silicon

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: python -m pip install -U pip build pytest cibuildwheel

      - name: Build wheel
        run: python -m cibuildwheel --output-dir dist
        env:
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_SKIP: "pp* *-musllinux_*"  # Skip PyPy and musl wheels if not needed
          CIBW_TEST_COMMAND: "pytest {project}"

      - name: Upload wheels as artifact
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-py${{ matrix.python-version }}
          path: dist/*.whl

  version-bump:
    name: Bump Version
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # needed to push tags

      - name: Set up Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Install bump-my-version
        run: python -m pip install bump-my-version

      - name: Bump patch version
        run: bump-my-version bump ${{ github.event.inputs.version_type }} --tag --push

  publish:
    name: Publish to PyPI and GitHub Release
    needs: version-bump
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Download all built wheels
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Flatten dist directory
        run: |
          mkdir final_dist
          find dist -name '*.whl' -exec mv {} final_dist/ \;

      - name: Extract version
        id: get_version
        run: |
          VERSION=$(grep '^version =' pyproject.toml | sed -E "s/.*= *[\"'](.*)[\"']/\1/")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install GitHub CLI
        uses: cli/cli-action@v2

      - name: Create GitHub Release with gh CLI
        run: |
          gh release create "v${{ env.VERSION }}" \
            --title "Release v${{ env.VERSION }}" \
            --notes "Automated release of version v${{ env.VERSION }}" \
            final_dist/*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.8.8
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          packages_dir: final_dist
